image: docker:latest

services:
  - docker:dind

stages:
  - build
  - test
  - staging
  - dast
  - apifuzz
  - cleanup
  - production

include:
  - template: Security/Container-Scanning.gitlab-ci.yml
  - template: Security/DAST.gitlab-ci.yml
  - template: API-Fuzzing.gitlab-ci.yml
  - template: Coverage-Fuzzing.gitlab-ci.yml
  - template: Security/License-Scanning.gitlab-ci.yml
  - template: Code-Quality.gitlab-ci.yml
  - template: Security/Dependency-Scanning.gitlab-ci.yml
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml
  - template: Jobs/SAST-IaC.gitlab-ci.yml
  - template: DAST-API.gitlab-ci.yml

build:
  stage: build
  variables:
    IMAGE: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA 
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY 
  script:
    - if [ $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH ]; then sh scripts/delete_latest.sh; IMAGE=$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG:latest; fi
    - docker build -t $IMAGE .
    - docker push "$IMAGE"

pages:
  image: registry.gitlab.com/pages/hugo/hugo_extended:latest
  before_script:
    - apk add --update --no-cache git
  script:
    - hugo --minify -s docs
    - cp -R docs/public .
  artifacts:
    paths:
      - public
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
  environment:
    name: documentation
    url: $CI_PAGES_URL
  allow_failure: true

unit:
  image: python:latest
  stage: test
  variables:
    NOTES_DB_BACKEND: "local"
    RUNNER_GENERATE_ARTIFACTS_METADATA: "true"
  before_script:
    - apt update -y; apt upgrade -y
    - apt install gcc curl openssl -y
    - apt-key adv --recv-keys --keyserver keyserver.ubuntu.com 0xcbcb082a1bb943db
    - curl -LsS https://downloads.mariadb.com/MariaDB/mariadb_repo_setup | bash
    - apt install libmariadb3 libmariadb-dev mariadb-client sqlite3 libsqlite3-dev -y
    - pip3 install --upgrade pip; pip3 install -r requirements.txt
  script:
    - python -m unittest tests/test_db.py 2>&1 | tee unit.txt
  artifacts:
    paths:
      - unit.txt

gemnasium-python-dependency_scanning:
  variables:
    SECURE_LOG_LEVEL: "debug"
    RUNNER_GENERATE_ARTIFACTS_METADATA: "true"
    DS_REMEDIATE: "false"
    DS_DISABLE_DIND: "true"
  before_script:
    - apt update -y; apt upgrade -y
    - apt install gcc curl openssl libpq-dev -y
    - apt-key adv --recv-keys --keyserver keyserver.ubuntu.com 0xcbcb082a1bb943db
    - curl -LsS https://downloads.mariadb.com/MariaDB/mariadb_repo_setup | bash
    - apt install libmariadb3 libmariadb-dev mariadb-client sqlite3 libsqlite3-dev -y
    - pip3 install --upgrade setuptools pip; pip3 install packaging
  artifacts:
    paths:
      - "**/gl-sbom-*.cdx.json"
      - gl-dependency-scanning-report.json
    reports:
      cyclonedx: "**/gl-sbom-*.cdx.json"

container_scanning:
  variables:
    CS_DISABLE_LANGUAGE_VULNERABILITY_SCAN: "false"
    CS_IMAGE: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA
    RUNNER_GENERATE_ARTIFACTS_METADATA: "true" 
  before_script:
    - if [ $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH ]; then CS_IMAGE=$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG:latest; fi

license_scanning:
  variables:
    CI_DEBUG_TRACE: "true"
  before_script:
    - apt update -y; apt upgrade -y
    - apt install gcc curl openssl python3-pip -y
    - apt-key adv --recv-keys --keyserver keyserver.ubuntu.com 0xcbcb082a1bb943db
    - curl -LsS https://downloads.mariadb.com/MariaDB/mariadb_repo_setup | bash
    - apt install libmariadb3 libmariadb-dev mariadb-client sqlite3 libsqlite3-dev -y
    - pip3 install --upgrade pip; pip3 install packaging

coverage-guided-fuzzing:
  image: python:latest
  stage: test
  extends: .fuzz_base
  script:
    - pip install --extra-index-url https://gitlab.com/api/v4/projects/19904939/packages/pypi/simple pythonfuzz
    - ./gitlab-cov-fuzz run --engine pythonfuzz -- fuzz.py

deploy-staging:
  image: registry.gitlab.com/gitlab-org/cluster-integration/helm-install-image:helm-3.10.0-kube-1.24.6-alpine-3.15
  stage: staging
  variables:
    HELM_HOST: "localhost:44134"
    IMAGE: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA
  before_script:
    - kubectl config use-context $CI_PROJECT_PATH:simplenotes
    - sh scripts/install_ingress.sh
    - sh scripts/install_mariadb.sh
  script:
    - kubectl config use-context $CI_PROJECT_PATH:simplenotes
    - if [ $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH ]; then IMAGE=$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG:latest; fi
    - helm upgrade --install notes-staging helm -f helm/values.yaml --set image=$IMAGE --set notes.path=notes-staging
    - kubectl rollout restart deployment notes-staging -n default
  after_script:
    - kubectl config use-context $CI_PROJECT_PATH:simplenotes
    - echo "DAST_WEBSITE=http://$(kubectl get svc -n ingress-nginx | grep LoadBalancer | awk '{print $4}')/notes-staging" >> deploy.env
    - echo "DAST_API_TARGET_URL=http://$(kubectl get svc -n ingress-nginx | grep LoadBalancer | awk '{print $4}')/notes-staging" >> deploy.env
    - export INGRESS_LB_IP=$(kubectl get svc -n ingress-nginx | grep LoadBalancer | awk '{print $4}')
    - echo "INGRESS_LB_IP=$INGRESS_LB_IP" >> deploy.env
    - echo "Access your application at http://$INGRESS_LB_IP/notes-staging"
  environment:
    name: staging
    url: http://$INGRESS_LB_IP/notes-staging
  artifacts:
    reports:
      dotenv: deploy.env
  dependencies:
    - build

dast:
  stage: dast
  variables:
     DAST_BROWSER_SCAN: "true"
     DAST_FULL_SCAN_ENABLED: "true"
  dependencies:
    - deploy-staging

dast_api:
  stage: dast
  before_script:
    - sed -i 's@HOST@'"${INGRESS_LB_IP}"'@' test_openapi.v2.0.json
  variables:
     DAST_API_PROFILE: Quick
     DAST_API_OPENAPI: test_openapi.v2.0.json
  dependencies:
    - deploy-staging

apifuzzer_fuzz:
  stage: apifuzz
  before_script:
    - sed -i 's@HOST@'"${INGRESS_LB_IP}"'@' test_openapi.v2.0.json
    - export FUZZAPI_TARGET_URL=http://${INGRESS_LB_IP}/
  variables:
    FUZZAPI_PROFILE: Quick-10
    FUZZAPI_OPENAPI: test_openapi.v2.0.json
  dependencies:
    - deploy-staging

reset-notes-table:
  image: registry.gitlab.com/gitlab-org/cluster-integration/helm-install-image:helm-3.10.0-kube-1.24.6-alpine-3.15
  stage: cleanup
  script:
    - kubectl config use-context $CI_PROJECT_PATH:simplenotes
    - kubectl exec -i deploy/notes -- sh scripts/reset_notes_table.sh
  dependencies:
    - dast
    - apifuzzer_fuzz

deploy-production:
  image: registry.gitlab.com/gitlab-org/cluster-integration/helm-install-image:helm-3.10.0-kube-1.24.6-alpine-3.15
  stage: production
  variables:
    HELM_HOST: "localhost:44134"
    IMAGE: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA
  before_script:
    - kubectl config use-context $CI_PROJECT_PATH:simplenotes
    - sh scripts/install_ingress.sh
    - sh scripts/install_mariadb.sh
  script:
    - kubectl config use-context $CI_PROJECT_PATH:simplenotes
    - if [ $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH ]; then IMAGE=$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG:latest; fi
    - helm upgrade --install notes-production helm -f helm/values.yaml --set image=$IMAGE
    - kubectl rollout restart deployment notes-production -n default
  after_script:
    - kubectl config use-context $CI_PROJECT_PATH:simplenotes
    - echo "DAST_WEBSITE=http://$(kubectl get svc -n ingress-nginx | grep LoadBalancer | awk '{print $4}')/notes" >> deploy.env
    - echo "DAST_API_TARGET_URL=http://$(kubectl get svc -n ingress-nginx | grep LoadBalancer | awk '{print $4}')/notes" >> deploy.env
    - export INGRESS_LB_IP=$(kubectl get svc -n ingress-nginx | grep LoadBalancer | awk '{print $4}')
    - echo "INGRESS_LB_IP=$INGRESS_LB_IP" >> deploy.env
    - echo "Access your application at http://$INGRESS_LB_IP/notes"
  environment:
    name: production
    url: http://$INGRESS_LB_IP/notes
  artifacts:
    reports:
      dotenv: deploy.env
  when: manual
